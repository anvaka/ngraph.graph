{"version":3,"file":"ngraph.graph.es.js","sources":["../node_modules/ngraph.events/index.js","../index.js"],"sourcesContent":["module.exports = function eventify(subject) {\n  validateSubject(subject);\n\n  var eventsStorage = createEventsStorage(subject);\n  subject.on = eventsStorage.on;\n  subject.off = eventsStorage.off;\n  subject.fire = eventsStorage.fire;\n  return subject;\n};\n\nfunction createEventsStorage(subject) {\n  // Store all event listeners to this hash. Key is event name, value is array\n  // of callback records.\n  //\n  // A callback record consists of callback function and its optional context:\n  // { 'eventName' => [{callback: function, ctx: object}] }\n  var registeredEvents = Object.create(null);\n\n  return {\n    on: function (eventName, callback, ctx) {\n      if (typeof callback !== 'function') {\n        throw new Error('callback is expected to be a function');\n      }\n      var handlers = registeredEvents[eventName];\n      if (!handlers) {\n        handlers = registeredEvents[eventName] = [];\n      }\n      handlers.push({callback: callback, ctx: ctx});\n\n      return subject;\n    },\n\n    off: function (eventName, callback) {\n      var wantToRemoveAll = (typeof eventName === 'undefined');\n      if (wantToRemoveAll) {\n        // Killing old events storage should be enough in this case:\n        registeredEvents = Object.create(null);\n        return subject;\n      }\n\n      if (registeredEvents[eventName]) {\n        var deleteAllCallbacksForEvent = (typeof callback !== 'function');\n        if (deleteAllCallbacksForEvent) {\n          delete registeredEvents[eventName];\n        } else {\n          var callbacks = registeredEvents[eventName];\n          for (var i = 0; i < callbacks.length; ++i) {\n            if (callbacks[i].callback === callback) {\n              callbacks.splice(i, 1);\n            }\n          }\n        }\n      }\n\n      return subject;\n    },\n\n    fire: function (eventName) {\n      var callbacks = registeredEvents[eventName];\n      if (!callbacks) {\n        return subject;\n      }\n\n      var fireArguments;\n      if (arguments.length > 1) {\n        fireArguments = Array.prototype.splice.call(arguments, 1);\n      }\n      for(var i = 0; i < callbacks.length; ++i) {\n        var callbackInfo = callbacks[i];\n        callbackInfo.callback.apply(callbackInfo.ctx, fireArguments);\n      }\n\n      return subject;\n    }\n  };\n}\n\nfunction validateSubject(subject) {\n  if (!subject) {\n    throw new Error('Eventify cannot use falsy object as events subject');\n  }\n  var reservedWords = ['on', 'fire', 'off'];\n  for (var i = 0; i < reservedWords.length; ++i) {\n    if (subject.hasOwnProperty(reservedWords[i])) {\n      throw new Error(\"Subject cannot be eventified, since it already has property '\" + reservedWords[i] + \"'\");\n    }\n  }\n}\n","/**\n * @fileOverview Contains definition of the core graph object.\n */\n\n// TODO: need to change storage layer:\n// 1. Be able to get all nodes O(1)\n// 2. Be able to get number of links O(1)\n\n/**\n * @example\n *  var graph = require('ngraph.graph')();\n *  graph.addNode(1);     // graph has one node.\n *  graph.addLink(2, 3);  // now graph contains three nodes and one link.\n *\n */\nimport eventify from 'ngraph.events';\nexport default createGraph;\n\n/**\n * Creates a new graph\n */\nfunction createGraph(options) {\n  // Graph structure is maintained as Map of nodes and Map of links.\n  // Each node has 'links' (Set) which holds all incident links. This is\n  // efficient for lookups and iteration, while keeping the API simple.\n  options = options || {};\n  if ('uniqueLinkId' in options) {\n    console.warn(\n      'ngraph.graph: Starting from version 0.14 `uniqueLinkId` is deprecated.\\n' +\n      'Use `multigraph` option instead\\n',\n      '\\n',\n      'Note: there is also change in default behavior: From now on each graph\\n' +\n      'is considered to be not a multigraph by default (each edge is unique).'\n    );\n\n    options.multigraph = options.uniqueLinkId;\n  }\n\n  // Dear reader, the non-multigraphs do not guarantee that there is only\n  // one link for a given pair of node. When this option is set to false\n  // we can save some memory and CPU (18% faster for non-multigraph);\n  if (options.multigraph === undefined) options.multigraph = false;\n\n  if (typeof Map !== 'function') {\n    // TODO: Should we polyfill it ourselves? We don't use much operations there..\n    throw new Error('ngraph.graph requires `Map` to be defined. Please polyfill it before using ngraph');\n  }\n\n  var nodes = new Map(); // nodeId => Node\n  var links = new Map(); // linkId => Link\n  // Hash of multi-edges. Used to track ids of edges between same nodes\n  var multiEdges = {};\n  var suspendEvents = 0;\n\n  var createLink = options.multigraph ? createUniqueLink : createSingleLink,\n\n    // Our graph API provides means to listen to graph changes. Users can subscribe\n    // to be notified about changes in the graph by using `on` method. However\n    // in some cases they don't use it. To avoid unnecessary memory consumption\n    // we will not record graph changes until we have at least one subscriber.\n    // Code below supports this optimization.\n    //\n    // Accumulates all changes made during graph updates.\n    // Each change element contains:\n    //  changeType - one of the strings: 'add', 'remove' or 'update';\n    //  node - if change is related to node this property is set to changed graph's node;\n    //  link - if change is related to link this property is set to changed graph's link;\n    changes = [],\n    recordLinkChange = noop,\n    recordNodeChange = noop,\n    enterModification = noop,\n    exitModification = noop;\n\n  // this is our public API:\n  var graphPart = {\n    /**\n     * Sometimes duck typing could be slow. Giving clients a hint about data structure\n     * via explicit version number here:\n     */\n    version: 20.0,\n\n    /**\n     * Adds node to the graph. If node with given id already exists in the graph\n     * its data is extended with whatever comes in 'data' argument.\n     *\n     * @param nodeId the node's identifier. A string or number is preferred.\n     * @param [data] additional data for the node being added. If node already\n     *   exists its data object is augmented with the new one.\n     *\n     * @return {node} The newly added node or node with given id if it already exists.\n     */\n    addNode: addNode,\n\n    /**\n     * Adds a link to the graph. The function always create a new\n     * link between two nodes. If one of the nodes does not exists\n     * a new node is created.\n     *\n     * @param fromId link start node id;\n     * @param toId link end node id;\n     * @param [data] additional data to be set on the new link;\n     *\n     * @return {link} The newly created link\n     */\n    addLink: addLink,\n\n    /**\n     * Removes link from the graph. If link does not exist does nothing.\n     *\n     * @param link - object returned by addLink() or getLinks() methods.\n     *\n     * @returns true if link was removed; false otherwise.\n     */\n    removeLink: removeLink,\n\n    /**\n     * Removes node with given id from the graph. If node does not exist in the graph\n     * does nothing.\n     *\n     * @param nodeId node's identifier passed to addNode() function.\n     *\n     * @returns true if node was removed; false otherwise.\n     */\n    removeNode: removeNode,\n\n    /**\n     * Gets node with given identifier. If node does not exist undefined value is returned.\n     *\n     * @param nodeId requested node identifier;\n     *\n     * @return {node} in with requested identifier or undefined if no such node exists.\n     */\n    getNode: getNode,\n\n    /**\n     * Gets number of nodes in this graph.\n     *\n     * @return number of nodes in the graph.\n     */\n    getNodeCount: getNodeCount,\n\n    /**\n     * Gets total number of links in the graph.\n     */\n    getLinkCount: getLinkCount,\n\n    /**\n     * Synonym for `getLinkCount()`\n     */\n    getEdgeCount: getLinkCount,\n\n    /**\n     * Synonym for `getLinkCount()`\n     */\n    getLinksCount: getLinkCount,\n\n    /**\n     * Synonym for `getNodeCount()`\n     */\n    getNodesCount: getNodeCount,\n\n    /**\n     * Gets all links (inbound and outbound) from the node with given id.\n     * If node with given id is not found null is returned.\n     *\n     * @param nodeId requested node identifier.\n     *\n     * @return Set of links from and to requested node if such node exists;\n     *   otherwise null is returned.\n     */\n    getLinks: getLinks,\n\n    /**\n     * Invokes callback on each node of the graph.\n     *\n     * @param {Function(node)} callback Function to be invoked. The function\n     *   is passed one argument: visited node.\n     */\n    forEachNode: forEachNode,\n\n    /**\n     * Invokes callback on every linked (adjacent) node to the given one.\n     *\n     * @param nodeId Identifier of the requested node.\n     * @param {Function(node, link)} callback Function to be called on all linked nodes.\n     *   The function is passed two parameters: adjacent node and link object itself.\n     * @param oriented if true graph treated as oriented.\n     */\n    forEachLinkedNode: forEachLinkedNode,\n\n    /**\n     * Enumerates all links in the graph\n     *\n     * @param {Function(link)} callback Function to be called on all links in the graph.\n     *   The function is passed one parameter: graph's link object.\n     *\n     * Link object contains at least the following fields:\n     *  fromId - node id where link starts;\n     *  toId - node id where link ends,\n     *  data - additional data passed to graph.addLink() method.\n     */\n    forEachLink: forEachLink,\n\n    /**\n     * Suspend all notifications about graph changes until\n     * endUpdate is called.\n     */\n    beginUpdate: enterModification,\n\n    /**\n     * Resumes all notifications about graph changes and fires\n     * graph 'changed' event in case there are any pending changes.\n     */\n    endUpdate: exitModification,\n\n    /**\n     * Removes all nodes and links from the graph.\n     */\n    clear: clear,\n\n    /**\n     * Detects whether there is a link between two nodes.\n     * Operation complexity is O(n) where n - number of links of a node.\n     * NOTE: this function is synonym for getLink()\n     *\n     * @returns link if there is one. null otherwise.\n     */\n    hasLink: getLink,\n\n    /**\n     * Detects whether there is a node with given id\n     * \n     * Operation complexity is O(1)\n     * NOTE: this function is synonym for getNode()\n     *\n     * @returns node if there is one; Falsy value otherwise.\n     */\n    hasNode: getNode,\n\n    /**\n     * Gets an edge between two nodes.\n     * Operation complexity is O(n) where n - number of links of a node.\n     *\n     * @param {string} fromId link start identifier\n     * @param {string} toId link end identifier\n     *\n     * @returns link if there is one; undefined otherwise.\n     */\n    getLink: getLink\n  };\n\n  // this will add `on()` and `fire()` methods.\n  eventify(graphPart);\n\n  monitorSubscribers();\n\n  return graphPart;\n\n  function monitorSubscribers() {\n    var realOn = graphPart.on;\n\n    // replace real `on` with our temporary on, which will trigger change\n    // modification monitoring:\n    graphPart.on = on;\n\n    function on() {\n      // now it's time to start tracking stuff:\n      graphPart.beginUpdate = enterModification = enterModificationReal;\n      graphPart.endUpdate = exitModification = exitModificationReal;\n      recordLinkChange = recordLinkChangeReal;\n      recordNodeChange = recordNodeChangeReal;\n\n      // this will replace current `on` method with real pub/sub from `eventify`.\n      graphPart.on = realOn;\n      // delegate to real `on` handler:\n      return realOn.apply(graphPart, arguments);\n    }\n  }\n\n  function recordLinkChangeReal(link, changeType) {\n    changes.push({\n      link: link,\n      changeType: changeType\n    });\n  }\n\n  function recordNodeChangeReal(node, changeType) {\n    changes.push({\n      node: node,\n      changeType: changeType\n    });\n  }\n\n  function addNode(nodeId, data) {\n    if (nodeId === undefined) {\n      throw new Error('Invalid node identifier');\n    }\n\n    enterModification();\n\n    var node = getNode(nodeId);\n    if (!node) {\n      node = new Node(nodeId, data);\n      recordNodeChange(node, 'add');\n    } else {\n      node.data = data;\n      recordNodeChange(node, 'update');\n    }\n\n    nodes.set(nodeId, node);\n\n    exitModification();\n    return node;\n  }\n\n  function getNode(nodeId) {\n    return nodes.get(nodeId);\n  }\n\n  function removeNode(nodeId) {\n    var node = getNode(nodeId);\n    if (!node) {\n      return false;\n    }\n\n    enterModification();\n\n    var prevLinks = node.links;\n    if (prevLinks) {\n      prevLinks.forEach(removeLinkInstance);\n      node.links = null;\n    }\n\n    nodes.delete(nodeId);\n\n    recordNodeChange(node, 'remove');\n\n    exitModification();\n\n    return true;\n  }\n\n\n  function addLink(fromId, toId, data) {\n    enterModification();\n\n    var fromNode = getNode(fromId) || addNode(fromId);\n    var toNode = getNode(toId) || addNode(toId);\n\n    var link = createLink(fromId, toId, data);\n    var isUpdate = links.has(link.id);\n\n    links.set(link.id, link);\n\n    // TODO: this is not cool. On large graphs potentially would consume more memory.\n    addLinkToNode(fromNode, link);\n    if (fromId !== toId) {\n      // make sure we are not duplicating links for self-loops\n      addLinkToNode(toNode, link);\n    }\n\n    recordLinkChange(link, isUpdate ? 'update' : 'add');\n\n    exitModification();\n\n    return link;\n  }\n\n  function createSingleLink(fromId, toId, data) {\n    var linkId = makeLinkId(fromId, toId);\n    var prevLink = links.get(linkId);\n    if (prevLink) {\n      prevLink.data = data;\n      return prevLink;\n    }\n\n    return new Link(fromId, toId, data, linkId);\n  }\n\n  function createUniqueLink(fromId, toId, data) {\n    // TODO: Find a better/faster way to store multigraphs\n    var linkId = makeLinkId(fromId, toId);\n    var isMultiEdge = multiEdges.hasOwnProperty(linkId);\n    if (isMultiEdge || getLink(fromId, toId)) {\n      if (!isMultiEdge) {\n        multiEdges[linkId] = 0;\n      }\n      var suffix = '@' + (++multiEdges[linkId]);\n      linkId = makeLinkId(fromId + suffix, toId + suffix);\n    }\n\n    return new Link(fromId, toId, data, linkId);\n  }\n\n  function getNodeCount() {\n    return nodes.size;\n  }\n\n  function getLinkCount() {\n    return links.size;\n  }\n\n  function getLinks(nodeId) {\n    var node = getNode(nodeId);\n    return node ? node.links : null;\n  }\n\n  function removeLink(link, otherId) {\n    if (otherId !== undefined) {\n      link = getLink(link, otherId);\n    }\n    return removeLinkInstance(link);\n  }\n\n  function removeLinkInstance(link) {\n    if (!link) {\n      return false;\n    }\n    if (!links.get(link.id)) return false;\n\n    enterModification();\n\n    links.delete(link.id);\n\n    var fromNode = getNode(link.fromId);\n    var toNode = getNode(link.toId);\n\n    if (fromNode) {\n      fromNode.links.delete(link);\n    }\n\n    if (toNode) {\n      toNode.links.delete(link);\n    }\n\n    recordLinkChange(link, 'remove');\n\n    exitModification();\n\n    return true;\n  }\n\n  function getLink(fromNodeId, toNodeId) {\n    if (fromNodeId === undefined || toNodeId === undefined) return undefined;\n    return links.get(makeLinkId(fromNodeId, toNodeId));\n  }\n\n  function clear() {\n    enterModification();\n    forEachNode(function (node) {\n      removeNode(node.id);\n    });\n    exitModification();\n  }\n\n  function forEachLink(callback) {\n    if (typeof callback === 'function') {\n      var valuesIterator = links.values();\n      var nextValue = valuesIterator.next();\n      while (!nextValue.done) {\n        if (callback(nextValue.value)) {\n          return true; // client doesn't want to proceed. Return.\n        }\n        nextValue = valuesIterator.next();\n      }\n    }\n  }\n\n  function forEachLinkedNode(nodeId, callback, oriented) {\n    var node = getNode(nodeId);\n\n    if (node && node.links && typeof callback === 'function') {\n      if (oriented) {\n        return forEachOrientedLink(node.links, nodeId, callback);\n      } else {\n        return forEachNonOrientedLink(node.links, nodeId, callback);\n      }\n    }\n  }\n\n  // eslint-disable-next-line no-shadow\n  function forEachNonOrientedLink(links, nodeId, callback) {\n    var quitFast;\n\n    var valuesIterator = links.values();\n    var nextValue = valuesIterator.next();\n    while (!nextValue.done) {\n      var link = nextValue.value;\n      var linkedNodeId = link.fromId === nodeId ? link.toId : link.fromId;\n      quitFast = callback(nodes.get(linkedNodeId), link);\n      if (quitFast) {\n        return true; // Client does not need more iterations. Break now.\n      }\n      nextValue = valuesIterator.next();\n    }\n  }\n\n  // eslint-disable-next-line no-shadow\n  function forEachOrientedLink(links, nodeId, callback) {\n    var quitFast;\n    var valuesIterator = links.values();\n    var nextValue = valuesIterator.next();\n    while (!nextValue.done) {\n      var link = nextValue.value;\n      if (link.fromId === nodeId) {\n        quitFast = callback(nodes.get(link.toId), link);\n        if (quitFast) {\n          return true; // Client does not need more iterations. Break now.\n        }\n      }\n      nextValue = valuesIterator.next();\n    }\n  }\n\n  // we will not fire anything until users of this library explicitly call `on()`\n  // method.\n  function noop() { }\n\n  // Enter, Exit modification allows bulk graph updates without firing events.\n  function enterModificationReal() {\n    suspendEvents += 1;\n  }\n\n  function exitModificationReal() {\n    suspendEvents -= 1;\n    if (suspendEvents === 0 && changes.length > 0) {\n      graphPart.fire('changed', changes);\n      changes.length = 0;\n    }\n  }\n\n  function forEachNode(callback) {\n    if (typeof callback !== 'function') {\n      throw new Error('Function is expected to iterate over graph nodes. You passed ' + callback);\n    }\n\n    var valuesIterator = nodes.values();\n    var nextValue = valuesIterator.next();\n    while (!nextValue.done) {\n      if (callback(nextValue.value)) {\n        return true; // client doesn't want to proceed. Return.\n      }\n      nextValue = valuesIterator.next();\n    }\n  }\n}\n\n/**\n * Internal structure to represent node;\n */\nfunction Node(id, data) {\n  this.id = id;\n  this.links = null;\n  this.data = data;\n}\n\nfunction addLinkToNode(node, link) {\n  if (node.links) {\n    node.links.add(link);\n  } else {\n    node.links = new Set([link]);\n  }\n}\n\n/**\n * Internal structure to represent links;\n */\nfunction Link(fromId, toId, data, id) {\n  this.fromId = fromId;\n  this.toId = toId;\n  this.data = data;\n  this.id = id;\n}\n\nfunction makeLinkId(fromId, toId) {\n  return fromId.toString() + '👉 ' + toId.toString();\n}\n"],"names":["ngraph_events","subject","validateSubject","eventsStorage","createEventsStorage","registeredEvents","eventName","callback","ctx","handlers","wantToRemoveAll","deleteAllCallbacksForEvent","callbacks","i","fireArguments","callbackInfo","reservedWords","createGraph","options","nodes","links","multiEdges","suspendEvents","createLink","createUniqueLink","createSingleLink","changes","recordLinkChange","noop","recordNodeChange","enterModification","exitModification","graphPart","addNode","addLink","removeLink","removeNode","getNode","getNodeCount","getLinkCount","getLinks","forEachNode","forEachLinkedNode","forEachLink","clear","getLink","eventify","monitorSubscribers","realOn","on","enterModificationReal","exitModificationReal","recordLinkChangeReal","recordNodeChangeReal","link","changeType","node","nodeId","data","Node","prevLinks","removeLinkInstance","fromId","toId","fromNode","toNode","isUpdate","addLinkToNode","linkId","makeLinkId","prevLink","Link","isMultiEdge","suffix","otherId","fromNodeId","toNodeId","valuesIterator","nextValue","oriented","forEachOrientedLink","forEachNonOrientedLink","quitFast","linkedNodeId","id"],"mappings":";;;;;;SAAAA,IAAiB,SAAkBC,GAAS;AAC1C,IAAAC,EAAgBD,CAAO;AAEvB,QAAIE,IAAgBC,EAAoBH,CAAO;AAC/C,WAAAA,EAAQ,KAAKE,EAAc,IAC3BF,EAAQ,MAAME,EAAc,KAC5BF,EAAQ,OAAOE,EAAc,MACtBF;AAAA,EACT;AAEA,WAASG,EAAoBH,GAAS;AAMpC,QAAII,IAAmB,uBAAO,OAAO,IAAI;AAEzC,WAAO;AAAA,MACL,IAAI,SAAUC,GAAWC,GAAUC,GAAK;AACtC,YAAI,OAAOD,KAAa;AACtB,gBAAM,IAAI,MAAM,uCAAuC;AAEzD,YAAIE,IAAWJ,EAAiBC,CAAS;AACzC,eAAKG,MACHA,IAAWJ,EAAiBC,CAAS,IAAI,CAAA,IAE3CG,EAAS,KAAK,EAAC,UAAUF,GAAU,KAAKC,EAAG,CAAC,GAErCP;AAAA,MACb;AAAA,MAEI,KAAK,SAAUK,GAAWC,GAAU;AAClC,YAAIG,IAAmB,OAAOJ,IAAc;AAC5C,YAAII;AAEF,iBAAAL,IAAmB,uBAAO,OAAO,IAAI,GAC9BJ;AAGT,YAAII,EAAiBC,CAAS,GAAG;AAC/B,cAAIK,IAA8B,OAAOJ,KAAa;AACtD,cAAII;AACF,mBAAON,EAAiBC,CAAS;AAAA;AAGjC,qBADIM,IAAYP,EAAiBC,CAAS,GACjCO,IAAI,GAAGA,IAAID,EAAU,QAAQ,EAAEC;AACtC,cAAID,EAAUC,CAAC,EAAE,aAAaN,KAC5BK,EAAU,OAAOC,GAAG,CAAC;AAAA,QAInC;AAEM,eAAOZ;AAAA,MACb;AAAA,MAEI,MAAM,SAAUK,GAAW;AACzB,YAAIM,IAAYP,EAAiBC,CAAS;AAC1C,YAAI,CAACM;AACH,iBAAOX;AAGT,YAAIa;AACJ,QAAI,UAAU,SAAS,MACrBA,IAAgB,MAAM,UAAU,OAAO,KAAK,WAAW,CAAC;AAE1D,iBAAQD,IAAI,GAAGA,IAAID,EAAU,QAAQ,EAAEC,GAAG;AACxC,cAAIE,IAAeH,EAAUC,CAAC;AAC9B,UAAAE,EAAa,SAAS,MAAMA,EAAa,KAAKD,CAAa;AAAA,QACnE;AAEM,eAAOb;AAAA,MACb;AAAA;EAEA;AAEA,WAASC,EAAgBD,GAAS;AAChC,QAAI,CAACA;AACH,YAAM,IAAI,MAAM,oDAAoD;AAGtE,aADIe,IAAgB,CAAC,MAAM,QAAQ,KAAK,GAC/BH,IAAI,GAAGA,IAAIG,EAAc,QAAQ,EAAEH;AAC1C,UAAIZ,EAAQ,eAAee,EAAcH,CAAC,CAAC;AACzC,cAAM,IAAI,MAAM,kEAAkEG,EAAcH,CAAC,IAAI,GAAG;AAAA,EAG9G;;;;;AClEA,SAASI,GAAYC,GAAS;AAsB5B,MAlBAA,IAAUA,KAAW,CAAA,GACjB,kBAAkBA,MACpB,QAAQ;AAAA,IACN;AAAA,IAEA;AAAA;AAAA,IACA;AAAA;AAAA,EAEN,GAEIA,EAAQ,aAAaA,EAAQ,eAM3BA,EAAQ,eAAe,WAAWA,EAAQ,aAAa,KAEvD,OAAO,OAAQ;AAEjB,UAAM,IAAI,MAAM,mFAAmF;AAGrG,MAAIC,IAAQ,oBAAI,OACZC,IAAQ,oBAAI,OAEZC,IAAa,CAAA,GACbC,IAAgB,GAEhBC,IAAaL,EAAQ,aAAaM,IAAmBC,GAavDC,IAAU,CAAA,GACVC,IAAmBC,GACnBC,IAAmBD,GACnBE,IAAoBF,GACpBG,IAAmBH,GAGjBI,IAAY;AAAA;AAAA;AAAA;AAAA;AAAA,IAKd,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYT,SAASC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAaT,SAASC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAST,YAAYC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUZ,YAAYC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASZ,SAASC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOT,cAAcC;AAAA;AAAA;AAAA;AAAA,IAKd,cAAcC;AAAA;AAAA;AAAA;AAAA,IAKd,cAAcA;AAAA;AAAA;AAAA;AAAA,IAKd,eAAeA;AAAA;AAAA;AAAA;AAAA,IAKf,eAAeD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWf,UAAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQV,aAAaC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUb,mBAAmBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAanB,aAAaC;AAAA;AAAA;AAAA;AAAA;AAAA,IAMb,aAAab;AAAA;AAAA;AAAA;AAAA;AAAA,IAMb,WAAWC;AAAA;AAAA;AAAA;AAAA,IAKX,OAAOa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASP,SAASC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUT,SAASR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWT,SAASQ;AAAA,EACb;AAGE,SAAAC,EAASd,CAAS,GAElBe,EAAkB,GAEXf;AAEP,WAASe,IAAqB;AAC5B,QAAIC,IAAShB,EAAU;AAIvB,IAAAA,EAAU,KAAKiB;AAEf,aAASA,IAAK;AAEZ,aAAAjB,EAAU,cAAcF,IAAoBoB,GAC5ClB,EAAU,YAAYD,IAAmBoB,GACzCxB,IAAmByB,GACnBvB,IAAmBwB,GAGnBrB,EAAU,KAAKgB,GAERA,EAAO,MAAMhB,GAAW,SAAS;AAAA,IAC1C;AAAA,EACF;AAEA,WAASoB,EAAqBE,GAAMC,GAAY;AAC9C,IAAA7B,EAAQ,KAAK;AAAA,MACX,MAAM4B;AAAA,MACN,YAAYC;AAAA,IAClB,CAAK;AAAA,EACH;AAEA,WAASF,EAAqBG,GAAMD,GAAY;AAC9C,IAAA7B,EAAQ,KAAK;AAAA,MACX,MAAM8B;AAAA,MACN,YAAYD;AAAA,IAClB,CAAK;AAAA,EACH;AAEA,WAAStB,EAAQwB,GAAQC,GAAM;AAC7B,QAAID,MAAW;AACb,YAAM,IAAI,MAAM,yBAAyB;AAG3C,IAAA3B,EAAiB;AAEjB,QAAI0B,IAAOnB,EAAQoB,CAAM;AACzB,WAAKD,KAIHA,EAAK,OAAOE,GACZ7B,EAAiB2B,GAAM,QAAQ,MAJ/BA,IAAO,IAAIG,EAAKF,GAAQC,CAAI,GAC5B7B,EAAiB2B,GAAM,KAAK,IAM9BrC,EAAM,IAAIsC,GAAQD,CAAI,GAEtBzB,EAAgB,GACTyB;AAAA,EACT;AAEA,WAASnB,EAAQoB,GAAQ;AACvB,WAAOtC,EAAM,IAAIsC,CAAM;AAAA,EACzB;AAEA,WAASrB,EAAWqB,GAAQ;AAC1B,QAAID,IAAOnB,EAAQoB,CAAM;AACzB,QAAI,CAACD;AACH,aAAO;AAGT,IAAA1B,EAAiB;AAEjB,QAAI8B,IAAYJ,EAAK;AACrB,WAAII,MACFA,EAAU,QAAQC,CAAkB,GACpCL,EAAK,QAAQ,OAGfrC,EAAM,OAAOsC,CAAM,GAEnB5B,EAAiB2B,GAAM,QAAQ,GAE/BzB,EAAgB,GAET;AAAA,EACT;AAGA,WAASG,EAAQ4B,GAAQC,GAAML,GAAM;AACnC,IAAA5B,EAAiB;AAEjB,QAAIkC,IAAW3B,EAAQyB,CAAM,KAAK7B,EAAQ6B,CAAM,GAC5CG,IAAS5B,EAAQ0B,CAAI,KAAK9B,EAAQ8B,CAAI,GAEtCT,IAAO/B,EAAWuC,GAAQC,GAAML,CAAI,GACpCQ,IAAW9C,EAAM,IAAIkC,EAAK,EAAE;AAEhC,WAAAlC,EAAM,IAAIkC,EAAK,IAAIA,CAAI,GAGvBa,EAAcH,GAAUV,CAAI,GACxBQ,MAAWC,KAEbI,EAAcF,GAAQX,CAAI,GAG5B3B,EAAiB2B,GAAMY,IAAW,WAAW,KAAK,GAElDnC,EAAgB,GAETuB;AAAA,EACT;AAEA,WAAS7B,EAAiBqC,GAAQC,GAAML,GAAM;AAC5C,QAAIU,IAASC,EAAWP,GAAQC,CAAI,GAChCO,IAAWlD,EAAM,IAAIgD,CAAM;AAC/B,WAAIE,KACFA,EAAS,OAAOZ,GACTY,KAGF,IAAIC,EAAKT,GAAQC,GAAML,GAAMU,CAAM;AAAA,EAC5C;AAEA,WAAS5C,EAAiBsC,GAAQC,GAAML,GAAM;AAE5C,QAAIU,IAASC,EAAWP,GAAQC,CAAI,GAChCS,IAAcnD,EAAW,eAAe+C,CAAM;AAClD,QAAII,KAAe3B,EAAQiB,GAAQC,CAAI,GAAG;AACxC,MAAKS,MACHnD,EAAW+C,CAAM,IAAI;AAEvB,UAAIK,IAAS,MAAO,EAAEpD,EAAW+C,CAAM;AACvC,MAAAA,IAASC,EAAWP,IAASW,GAAQV,IAAOU,CAAM;AAAA,IACpD;AAEA,WAAO,IAAIF,EAAKT,GAAQC,GAAML,GAAMU,CAAM;AAAA,EAC5C;AAEA,WAAS9B,IAAe;AACtB,WAAOnB,EAAM;AAAA,EACf;AAEA,WAASoB,IAAe;AACtB,WAAOnB,EAAM;AAAA,EACf;AAEA,WAASoB,EAASiB,GAAQ;AACxB,QAAID,IAAOnB,EAAQoB,CAAM;AACzB,WAAOD,IAAOA,EAAK,QAAQ;AAAA,EAC7B;AAEA,WAASrB,EAAWmB,GAAMoB,GAAS;AACjC,WAAIA,MAAY,WACdpB,IAAOT,EAAQS,GAAMoB,CAAO,IAEvBb,EAAmBP,CAAI;AAAA,EAChC;AAEA,WAASO,EAAmBP,GAAM;AAIhC,QAHI,CAACA,KAGD,CAAClC,EAAM,IAAIkC,EAAK,EAAE,EAAG,QAAO;AAEhC,IAAAxB,EAAiB,GAEjBV,EAAM,OAAOkC,EAAK,EAAE;AAEpB,QAAIU,IAAW3B,EAAQiB,EAAK,MAAM,GAC9BW,IAAS5B,EAAQiB,EAAK,IAAI;AAE9B,WAAIU,KACFA,EAAS,MAAM,OAAOV,CAAI,GAGxBW,KACFA,EAAO,MAAM,OAAOX,CAAI,GAG1B3B,EAAiB2B,GAAM,QAAQ,GAE/BvB,EAAgB,GAET;AAAA,EACT;AAEA,WAASc,EAAQ8B,GAAYC,GAAU;AACrC,QAAI,EAAAD,MAAe,UAAaC,MAAa;AAC7C,aAAOxD,EAAM,IAAIiD,EAAWM,GAAYC,CAAQ,CAAC;AAAA,EACnD;AAEA,WAAShC,IAAQ;AACf,IAAAd,EAAiB,GACjBW,EAAY,SAAUe,GAAM;AAC1B,MAAApB,EAAWoB,EAAK,EAAE;AAAA,IACpB,CAAC,GACDzB,EAAgB;AAAA,EAClB;AAEA,WAASY,EAAYpC,GAAU;AAC7B,QAAI,OAAOA,KAAa;AAGtB,eAFIsE,IAAiBzD,EAAM,OAAM,GAC7B0D,IAAYD,EAAe,KAAI,GAC5B,CAACC,EAAU,QAAM;AACtB,YAAIvE,EAASuE,EAAU,KAAK;AAC1B,iBAAO;AAET,QAAAA,IAAYD,EAAe,KAAI;AAAA,MACjC;AAAA,EAEJ;AAEA,WAASnC,EAAkBe,GAAQlD,GAAUwE,GAAU;AACrD,QAAIvB,IAAOnB,EAAQoB,CAAM;AAEzB,QAAID,KAAQA,EAAK,SAAS,OAAOjD,KAAa;AAC5C,aAAIwE,IACKC,EAAoBxB,EAAK,OAAOC,GAAQlD,CAAQ,IAEhD0E,EAAuBzB,EAAK,OAAOC,GAAQlD,CAAQ;AAAA,EAGhE;AAGA,WAAS0E,EAAuB7D,GAAOqC,GAAQlD,GAAU;AAKvD,aAJI2E,GAEAL,IAAiBzD,EAAM,OAAM,GAC7B0D,IAAYD,EAAe,KAAI,GAC5B,CAACC,EAAU,QAAM;AACtB,UAAIxB,IAAOwB,EAAU,OACjBK,IAAe7B,EAAK,WAAWG,IAASH,EAAK,OAAOA,EAAK;AAE7D,UADA4B,IAAW3E,EAASY,EAAM,IAAIgE,CAAY,GAAG7B,CAAI,GAC7C4B;AACF,eAAO;AAET,MAAAJ,IAAYD,EAAe,KAAI;AAAA,IACjC;AAAA,EACF;AAGA,WAASG,EAAoB5D,GAAOqC,GAAQlD,GAAU;AAIpD,aAHI2E,GACAL,IAAiBzD,EAAM,OAAM,GAC7B0D,IAAYD,EAAe,KAAI,GAC5B,CAACC,EAAU,QAAM;AACtB,UAAIxB,IAAOwB,EAAU;AACrB,UAAIxB,EAAK,WAAWG,MAClByB,IAAW3E,EAASY,EAAM,IAAImC,EAAK,IAAI,GAAGA,CAAI,GAC1C4B;AACF,eAAO;AAGX,MAAAJ,IAAYD,EAAe,KAAI;AAAA,IACjC;AAAA,EACF;AAIA,WAASjD,IAAO;AAAA,EAAE;AAGlB,WAASsB,IAAwB;AAC/B,IAAA5B,KAAiB;AAAA,EACnB;AAEA,WAAS6B,IAAuB;AAC9B,IAAA7B,KAAiB,GACbA,MAAkB,KAAKI,EAAQ,SAAS,MAC1CM,EAAU,KAAK,WAAWN,CAAO,GACjCA,EAAQ,SAAS;AAAA,EAErB;AAEA,WAASe,EAAYlC,GAAU;AAC7B,QAAI,OAAOA,KAAa;AACtB,YAAM,IAAI,MAAM,kEAAkEA,CAAQ;AAK5F,aAFIsE,IAAiB1D,EAAM,OAAM,GAC7B2D,IAAYD,EAAe,KAAI,GAC5B,CAACC,EAAU,QAAM;AACtB,UAAIvE,EAASuE,EAAU,KAAK;AAC1B,eAAO;AAET,MAAAA,IAAYD,EAAe,KAAI;AAAA,IACjC;AAAA,EACF;AACF;AAKA,SAASlB,EAAKyB,GAAI1B,GAAM;AACtB,OAAK,KAAK0B,GACV,KAAK,QAAQ,MACb,KAAK,OAAO1B;AACd;AAEA,SAASS,EAAcX,GAAMF,GAAM;AACjC,EAAIE,EAAK,QACPA,EAAK,MAAM,IAAIF,CAAI,IAEnBE,EAAK,QAAQ,oBAAI,IAAI,CAACF,CAAI,CAAC;AAE/B;AAKA,SAASiB,EAAKT,GAAQC,GAAML,GAAM0B,GAAI;AACpC,OAAK,SAAStB,GACd,KAAK,OAAOC,GACZ,KAAK,OAAOL,GACZ,KAAK,KAAK0B;AACZ;AAEA,SAASf,EAAWP,GAAQC,GAAM;AAChC,SAAOD,EAAO,SAAQ,IAAK,QAAQC,EAAK,SAAQ;AAClD;","x_google_ignoreList":[0]}
{"version":3,"file":"ngraph.graph.umd.js","sources":["../node_modules/ngraph.events/index.js","../index.js"],"sourcesContent":["module.exports = function eventify(subject) {\n  validateSubject(subject);\n\n  var eventsStorage = createEventsStorage(subject);\n  subject.on = eventsStorage.on;\n  subject.off = eventsStorage.off;\n  subject.fire = eventsStorage.fire;\n  return subject;\n};\n\nfunction createEventsStorage(subject) {\n  // Store all event listeners to this hash. Key is event name, value is array\n  // of callback records.\n  //\n  // A callback record consists of callback function and its optional context:\n  // { 'eventName' => [{callback: function, ctx: object}] }\n  var registeredEvents = Object.create(null);\n\n  return {\n    on: function (eventName, callback, ctx) {\n      if (typeof callback !== 'function') {\n        throw new Error('callback is expected to be a function');\n      }\n      var handlers = registeredEvents[eventName];\n      if (!handlers) {\n        handlers = registeredEvents[eventName] = [];\n      }\n      handlers.push({callback: callback, ctx: ctx});\n\n      return subject;\n    },\n\n    off: function (eventName, callback) {\n      var wantToRemoveAll = (typeof eventName === 'undefined');\n      if (wantToRemoveAll) {\n        // Killing old events storage should be enough in this case:\n        registeredEvents = Object.create(null);\n        return subject;\n      }\n\n      if (registeredEvents[eventName]) {\n        var deleteAllCallbacksForEvent = (typeof callback !== 'function');\n        if (deleteAllCallbacksForEvent) {\n          delete registeredEvents[eventName];\n        } else {\n          var callbacks = registeredEvents[eventName];\n          for (var i = 0; i < callbacks.length; ++i) {\n            if (callbacks[i].callback === callback) {\n              callbacks.splice(i, 1);\n            }\n          }\n        }\n      }\n\n      return subject;\n    },\n\n    fire: function (eventName) {\n      var callbacks = registeredEvents[eventName];\n      if (!callbacks) {\n        return subject;\n      }\n\n      var fireArguments;\n      if (arguments.length > 1) {\n        fireArguments = Array.prototype.splice.call(arguments, 1);\n      }\n      for(var i = 0; i < callbacks.length; ++i) {\n        var callbackInfo = callbacks[i];\n        callbackInfo.callback.apply(callbackInfo.ctx, fireArguments);\n      }\n\n      return subject;\n    }\n  };\n}\n\nfunction validateSubject(subject) {\n  if (!subject) {\n    throw new Error('Eventify cannot use falsy object as events subject');\n  }\n  var reservedWords = ['on', 'fire', 'off'];\n  for (var i = 0; i < reservedWords.length; ++i) {\n    if (subject.hasOwnProperty(reservedWords[i])) {\n      throw new Error(\"Subject cannot be eventified, since it already has property '\" + reservedWords[i] + \"'\");\n    }\n  }\n}\n","/**\n * @fileOverview Contains definition of the core graph object.\n */\n\n// TODO: need to change storage layer:\n// 1. Be able to get all nodes O(1)\n// 2. Be able to get number of links O(1)\n\n/**\n * @example\n *  var graph = require('ngraph.graph')();\n *  graph.addNode(1);     // graph has one node.\n *  graph.addLink(2, 3);  // now graph contains three nodes and one link.\n *\n */\nimport eventify from 'ngraph.events';\nexport default createGraph;\n\n/**\n * Creates a new graph\n */\nfunction createGraph(options) {\n  // Graph structure is maintained as Map of nodes and Map of links.\n  // Each node has 'links' (Set) which holds all incident links. This is\n  // efficient for lookups and iteration, while keeping the API simple.\n  options = options || {};\n  if ('uniqueLinkId' in options) {\n    console.warn(\n      'ngraph.graph: Starting from version 0.14 `uniqueLinkId` is deprecated.\\n' +\n      'Use `multigraph` option instead\\n',\n      '\\n',\n      'Note: there is also change in default behavior: From now on each graph\\n' +\n      'is considered to be not a multigraph by default (each edge is unique).'\n    );\n\n    options.multigraph = options.uniqueLinkId;\n  }\n\n  // Dear reader, the non-multigraphs do not guarantee that there is only\n  // one link for a given pair of node. When this option is set to false\n  // we can save some memory and CPU (18% faster for non-multigraph);\n  if (options.multigraph === undefined) options.multigraph = false;\n\n  if (typeof Map !== 'function') {\n    // TODO: Should we polyfill it ourselves? We don't use much operations there..\n    throw new Error('ngraph.graph requires `Map` to be defined. Please polyfill it before using ngraph');\n  }\n\n  var nodes = new Map(); // nodeId => Node\n  var links = new Map(); // linkId => Link\n  // Hash of multi-edges. Used to track ids of edges between same nodes\n  var multiEdges = {};\n  var suspendEvents = 0;\n\n  var createLink = options.multigraph ? createUniqueLink : createSingleLink,\n\n    // Our graph API provides means to listen to graph changes. Users can subscribe\n    // to be notified about changes in the graph by using `on` method. However\n    // in some cases they don't use it. To avoid unnecessary memory consumption\n    // we will not record graph changes until we have at least one subscriber.\n    // Code below supports this optimization.\n    //\n    // Accumulates all changes made during graph updates.\n    // Each change element contains:\n    //  changeType - one of the strings: 'add', 'remove' or 'update';\n    //  node - if change is related to node this property is set to changed graph's node;\n    //  link - if change is related to link this property is set to changed graph's link;\n    changes = [],\n    recordLinkChange = noop,\n    recordNodeChange = noop,\n    enterModification = noop,\n    exitModification = noop;\n\n  // this is our public API:\n  var graphPart = {\n    /**\n     * Sometimes duck typing could be slow. Giving clients a hint about data structure\n     * via explicit version number here:\n     */\n    version: 20.0,\n\n    /**\n     * Adds node to the graph. If node with given id already exists in the graph\n     * its data is extended with whatever comes in 'data' argument.\n     *\n     * @param nodeId the node's identifier. A string or number is preferred.\n     * @param [data] additional data for the node being added. If node already\n     *   exists its data object is augmented with the new one.\n     *\n     * @return {node} The newly added node or node with given id if it already exists.\n     */\n    addNode: addNode,\n\n    /**\n     * Adds a link to the graph. The function always create a new\n     * link between two nodes. If one of the nodes does not exists\n     * a new node is created.\n     *\n     * @param fromId link start node id;\n     * @param toId link end node id;\n     * @param [data] additional data to be set on the new link;\n     *\n     * @return {link} The newly created link\n     */\n    addLink: addLink,\n\n    /**\n     * Removes link from the graph. If link does not exist does nothing.\n     *\n     * @param link - object returned by addLink() or getLinks() methods.\n     *\n     * @returns true if link was removed; false otherwise.\n     */\n    removeLink: removeLink,\n\n    /**\n     * Removes node with given id from the graph. If node does not exist in the graph\n     * does nothing.\n     *\n     * @param nodeId node's identifier passed to addNode() function.\n     *\n     * @returns true if node was removed; false otherwise.\n     */\n    removeNode: removeNode,\n\n    /**\n     * Gets node with given identifier. If node does not exist undefined value is returned.\n     *\n     * @param nodeId requested node identifier;\n     *\n     * @return {node} in with requested identifier or undefined if no such node exists.\n     */\n    getNode: getNode,\n\n    /**\n     * Gets number of nodes in this graph.\n     *\n     * @return number of nodes in the graph.\n     */\n    getNodeCount: getNodeCount,\n\n    /**\n     * Gets total number of links in the graph.\n     */\n    getLinkCount: getLinkCount,\n\n    /**\n     * Synonym for `getLinkCount()`\n     */\n    getEdgeCount: getLinkCount,\n\n    /**\n     * Synonym for `getLinkCount()`\n     */\n    getLinksCount: getLinkCount,\n\n    /**\n     * Synonym for `getNodeCount()`\n     */\n    getNodesCount: getNodeCount,\n\n    /**\n     * Gets all links (inbound and outbound) from the node with given id.\n     * If node with given id is not found null is returned.\n     *\n     * @param nodeId requested node identifier.\n     *\n     * @return Set of links from and to requested node if such node exists;\n     *   otherwise null is returned.\n     */\n    getLinks: getLinks,\n\n    /**\n     * Invokes callback on each node of the graph.\n     *\n     * @param {Function(node)} callback Function to be invoked. The function\n     *   is passed one argument: visited node.\n     */\n    forEachNode: forEachNode,\n\n    /**\n     * Invokes callback on every linked (adjacent) node to the given one.\n     *\n     * @param nodeId Identifier of the requested node.\n     * @param {Function(node, link)} callback Function to be called on all linked nodes.\n     *   The function is passed two parameters: adjacent node and link object itself.\n     * @param oriented if true graph treated as oriented.\n     */\n    forEachLinkedNode: forEachLinkedNode,\n\n    /**\n     * Enumerates all links in the graph\n     *\n     * @param {Function(link)} callback Function to be called on all links in the graph.\n     *   The function is passed one parameter: graph's link object.\n     *\n     * Link object contains at least the following fields:\n     *  fromId - node id where link starts;\n     *  toId - node id where link ends,\n     *  data - additional data passed to graph.addLink() method.\n     */\n    forEachLink: forEachLink,\n\n    /**\n     * Suspend all notifications about graph changes until\n     * endUpdate is called.\n     */\n    beginUpdate: enterModification,\n\n    /**\n     * Resumes all notifications about graph changes and fires\n     * graph 'changed' event in case there are any pending changes.\n     */\n    endUpdate: exitModification,\n\n    /**\n     * Removes all nodes and links from the graph.\n     */\n    clear: clear,\n\n    /**\n     * Detects whether there is a link between two nodes.\n     * Operation complexity is O(n) where n - number of links of a node.\n     * NOTE: this function is synonym for getLink()\n     *\n     * @returns link if there is one. null otherwise.\n     */\n    hasLink: getLink,\n\n    /**\n     * Detects whether there is a node with given id\n     * \n     * Operation complexity is O(1)\n     * NOTE: this function is synonym for getNode()\n     *\n     * @returns node if there is one; Falsy value otherwise.\n     */\n    hasNode: getNode,\n\n    /**\n     * Gets an edge between two nodes.\n     * Operation complexity is O(n) where n - number of links of a node.\n     *\n     * @param {string} fromId link start identifier\n     * @param {string} toId link end identifier\n     *\n     * @returns link if there is one; undefined otherwise.\n     */\n    getLink: getLink\n  };\n\n  // this will add `on()` and `fire()` methods.\n  eventify(graphPart);\n\n  monitorSubscribers();\n\n  return graphPart;\n\n  function monitorSubscribers() {\n    var realOn = graphPart.on;\n\n    // replace real `on` with our temporary on, which will trigger change\n    // modification monitoring:\n    graphPart.on = on;\n\n    function on() {\n      // now it's time to start tracking stuff:\n      graphPart.beginUpdate = enterModification = enterModificationReal;\n      graphPart.endUpdate = exitModification = exitModificationReal;\n      recordLinkChange = recordLinkChangeReal;\n      recordNodeChange = recordNodeChangeReal;\n\n      // this will replace current `on` method with real pub/sub from `eventify`.\n      graphPart.on = realOn;\n      // delegate to real `on` handler:\n      return realOn.apply(graphPart, arguments);\n    }\n  }\n\n  function recordLinkChangeReal(link, changeType) {\n    changes.push({\n      link: link,\n      changeType: changeType\n    });\n  }\n\n  function recordNodeChangeReal(node, changeType) {\n    changes.push({\n      node: node,\n      changeType: changeType\n    });\n  }\n\n  function addNode(nodeId, data) {\n    if (nodeId === undefined) {\n      throw new Error('Invalid node identifier');\n    }\n\n    enterModification();\n\n    var node = getNode(nodeId);\n    if (!node) {\n      node = new Node(nodeId, data);\n      recordNodeChange(node, 'add');\n    } else {\n      node.data = data;\n      recordNodeChange(node, 'update');\n    }\n\n    nodes.set(nodeId, node);\n\n    exitModification();\n    return node;\n  }\n\n  function getNode(nodeId) {\n    return nodes.get(nodeId);\n  }\n\n  function removeNode(nodeId) {\n    var node = getNode(nodeId);\n    if (!node) {\n      return false;\n    }\n\n    enterModification();\n\n    var prevLinks = node.links;\n    if (prevLinks) {\n      prevLinks.forEach(removeLinkInstance);\n      node.links = null;\n    }\n\n    nodes.delete(nodeId);\n\n    recordNodeChange(node, 'remove');\n\n    exitModification();\n\n    return true;\n  }\n\n\n  function addLink(fromId, toId, data) {\n    enterModification();\n\n    var fromNode = getNode(fromId) || addNode(fromId);\n    var toNode = getNode(toId) || addNode(toId);\n\n    var link = createLink(fromId, toId, data);\n    var isUpdate = links.has(link.id);\n\n    links.set(link.id, link);\n\n    // TODO: this is not cool. On large graphs potentially would consume more memory.\n    addLinkToNode(fromNode, link);\n    if (fromId !== toId) {\n      // make sure we are not duplicating links for self-loops\n      addLinkToNode(toNode, link);\n    }\n\n    recordLinkChange(link, isUpdate ? 'update' : 'add');\n\n    exitModification();\n\n    return link;\n  }\n\n  function createSingleLink(fromId, toId, data) {\n    var linkId = makeLinkId(fromId, toId);\n    var prevLink = links.get(linkId);\n    if (prevLink) {\n      prevLink.data = data;\n      return prevLink;\n    }\n\n    return new Link(fromId, toId, data, linkId);\n  }\n\n  function createUniqueLink(fromId, toId, data) {\n    // TODO: Find a better/faster way to store multigraphs\n    var linkId = makeLinkId(fromId, toId);\n    var isMultiEdge = multiEdges.hasOwnProperty(linkId);\n    if (isMultiEdge || getLink(fromId, toId)) {\n      if (!isMultiEdge) {\n        multiEdges[linkId] = 0;\n      }\n      var suffix = '@' + (++multiEdges[linkId]);\n      linkId = makeLinkId(fromId + suffix, toId + suffix);\n    }\n\n    return new Link(fromId, toId, data, linkId);\n  }\n\n  function getNodeCount() {\n    return nodes.size;\n  }\n\n  function getLinkCount() {\n    return links.size;\n  }\n\n  function getLinks(nodeId) {\n    var node = getNode(nodeId);\n    return node ? node.links : null;\n  }\n\n  function removeLink(link, otherId) {\n    if (otherId !== undefined) {\n      link = getLink(link, otherId);\n    }\n    return removeLinkInstance(link);\n  }\n\n  function removeLinkInstance(link) {\n    if (!link) {\n      return false;\n    }\n    if (!links.get(link.id)) return false;\n\n    enterModification();\n\n    links.delete(link.id);\n\n    var fromNode = getNode(link.fromId);\n    var toNode = getNode(link.toId);\n\n    if (fromNode) {\n      fromNode.links.delete(link);\n    }\n\n    if (toNode) {\n      toNode.links.delete(link);\n    }\n\n    recordLinkChange(link, 'remove');\n\n    exitModification();\n\n    return true;\n  }\n\n  function getLink(fromNodeId, toNodeId) {\n    if (fromNodeId === undefined || toNodeId === undefined) return undefined;\n    return links.get(makeLinkId(fromNodeId, toNodeId));\n  }\n\n  function clear() {\n    enterModification();\n    forEachNode(function (node) {\n      removeNode(node.id);\n    });\n    exitModification();\n  }\n\n  function forEachLink(callback) {\n    if (typeof callback === 'function') {\n      var valuesIterator = links.values();\n      var nextValue = valuesIterator.next();\n      while (!nextValue.done) {\n        if (callback(nextValue.value)) {\n          return true; // client doesn't want to proceed. Return.\n        }\n        nextValue = valuesIterator.next();\n      }\n    }\n  }\n\n  function forEachLinkedNode(nodeId, callback, oriented) {\n    var node = getNode(nodeId);\n\n    if (node && node.links && typeof callback === 'function') {\n      if (oriented) {\n        return forEachOrientedLink(node.links, nodeId, callback);\n      } else {\n        return forEachNonOrientedLink(node.links, nodeId, callback);\n      }\n    }\n  }\n\n  // eslint-disable-next-line no-shadow\n  function forEachNonOrientedLink(links, nodeId, callback) {\n    var quitFast;\n\n    var valuesIterator = links.values();\n    var nextValue = valuesIterator.next();\n    while (!nextValue.done) {\n      var link = nextValue.value;\n      var linkedNodeId = link.fromId === nodeId ? link.toId : link.fromId;\n      quitFast = callback(nodes.get(linkedNodeId), link);\n      if (quitFast) {\n        return true; // Client does not need more iterations. Break now.\n      }\n      nextValue = valuesIterator.next();\n    }\n  }\n\n  // eslint-disable-next-line no-shadow\n  function forEachOrientedLink(links, nodeId, callback) {\n    var quitFast;\n    var valuesIterator = links.values();\n    var nextValue = valuesIterator.next();\n    while (!nextValue.done) {\n      var link = nextValue.value;\n      if (link.fromId === nodeId) {\n        quitFast = callback(nodes.get(link.toId), link);\n        if (quitFast) {\n          return true; // Client does not need more iterations. Break now.\n        }\n      }\n      nextValue = valuesIterator.next();\n    }\n  }\n\n  // we will not fire anything until users of this library explicitly call `on()`\n  // method.\n  function noop() { }\n\n  // Enter, Exit modification allows bulk graph updates without firing events.\n  function enterModificationReal() {\n    suspendEvents += 1;\n  }\n\n  function exitModificationReal() {\n    suspendEvents -= 1;\n    if (suspendEvents === 0 && changes.length > 0) {\n      graphPart.fire('changed', changes);\n      changes.length = 0;\n    }\n  }\n\n  function forEachNode(callback) {\n    if (typeof callback !== 'function') {\n      throw new Error('Function is expected to iterate over graph nodes. You passed ' + callback);\n    }\n\n    var valuesIterator = nodes.values();\n    var nextValue = valuesIterator.next();\n    while (!nextValue.done) {\n      if (callback(nextValue.value)) {\n        return true; // client doesn't want to proceed. Return.\n      }\n      nextValue = valuesIterator.next();\n    }\n  }\n}\n\n/**\n * Internal structure to represent node;\n */\nfunction Node(id, data) {\n  this.id = id;\n  this.links = null;\n  this.data = data;\n}\n\nfunction addLinkToNode(node, link) {\n  if (node.links) {\n    node.links.add(link);\n  } else {\n    node.links = new Set([link]);\n  }\n}\n\n/**\n * Internal structure to represent links;\n */\nfunction Link(fromId, toId, data, id) {\n  this.fromId = fromId;\n  this.toId = toId;\n  this.data = data;\n  this.id = id;\n}\n\nfunction makeLinkId(fromId, toId) {\n  return fromId.toString() + '👉 ' + toId.toString();\n}\n"],"names":["ngraph_events","subject","validateSubject","eventsStorage","createEventsStorage","registeredEvents","eventName","callback","ctx","handlers","wantToRemoveAll","deleteAllCallbacksForEvent","callbacks","i","fireArguments","callbackInfo","reservedWords","createGraph","options","nodes","links","multiEdges","suspendEvents","createLink","createUniqueLink","createSingleLink","changes","recordLinkChange","noop","recordNodeChange","enterModification","exitModification","graphPart","addNode","addLink","removeLink","removeNode","getNode","getNodeCount","getLinkCount","getLinks","forEachNode","forEachLinkedNode","forEachLink","clear","getLink","eventify","monitorSubscribers","realOn","on","enterModificationReal","exitModificationReal","recordLinkChangeReal","recordNodeChangeReal","link","changeType","node","nodeId","data","Node","prevLinks","removeLinkInstance","fromId","toId","fromNode","toNode","isUpdate","addLinkToNode","linkId","makeLinkId","prevLink","Link","isMultiEdge","suffix","otherId","fromNodeId","toNodeId","valuesIterator","nextValue","oriented","forEachOrientedLink","forEachNonOrientedLink","quitFast","linkedNodeId","id"],"mappings":"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","x_google_ignoreList":[0]}